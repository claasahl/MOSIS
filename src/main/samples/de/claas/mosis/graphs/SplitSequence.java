package de.claas.mosis.graphs;

import de.claas.mosis.flow.Graph;
import de.claas.mosis.flow.iterator.InfiniteLevelOrder;
import de.claas.mosis.io.StandardInputOutputImpl;
import de.claas.mosis.io.format.PlainText;
import de.claas.mosis.io.generator.Linear;
import de.claas.mosis.processing.debug.ToString;

/**
 * The class {@link de.claas.mosis.graphs.SplitSequence} is a sample
 * demonstrator. It is intended to show the use of a (simple) sequential
 * information flow, where the results of a single source are fed into two
 * succeeding {@link de.claas.mosis.model.Processor} instances. Here the basic
 * sequence is based on three {@link de.claas.mosis.model.Processor} objects
 * only (i.e. a source and two sinks).
 *
 * @author Claas Ahlrichs (claasahl@tzi.de)
 */
public class SplitSequence {

    /**
     * Entry point for this demonstrator. Here a linear function is generated by
     * one module and displayed by two succeeding modules. The functions slope
     * and intercept can be varied by changing the method's arguments.
     *
     * @param args the arguments, namely slope (i.e. {@link de.claas.mosis.io.generator.Linear#M})
     *             and intercept (i.e. {@link de.claas.mosis.io.generator.Linear#B}).
     */
    public static void main(String[] args) throws Exception {
        // Prepare processing modules
        Linear src = new Linear();
        src.setParameter(Linear.M, args.length >= 1 ? args[0] : "1");
        src.setParameter(Linear.B, args.length >= 2 ? args[1] : "0");
        ToString toString = new ToString();
        PlainText dst1 = new PlainText();
        dst1.setParameter(PlainText.IMPL,
                StandardInputOutputImpl.class.getName());
        dst1.setParameter(PlainText.PREFIX, "DST#1: ");
        PlainText dst2 = new PlainText();
        dst2.setParameter(PlainText.IMPL,
                StandardInputOutputImpl.class.getName());
        dst2.setParameter(PlainText.PREFIX, "DST#2: ");

        // Construct graph and initiate processing
        Graph graph = new Graph();
        graph.addLink(src, toString);
        graph.addLink(toString, dst1);
        graph.addLink(toString, dst2);
        graph.process(InfiniteLevelOrder.class);
    }

}
