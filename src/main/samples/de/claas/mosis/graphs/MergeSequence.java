package de.claas.mosis.graphs;

import de.claas.mosis.flow.Graph;
import de.claas.mosis.flow.iterator.InfiniteLevelOrder;
import de.claas.mosis.io.StandardInputOutputImpl;
import de.claas.mosis.io.format.PlainText;
import de.claas.mosis.io.generator.Linear;
import de.claas.mosis.io.generator.Random;
import de.claas.mosis.processing.debug.ToString;

/**
 * The class {@link de.claas.mosis.graphs.MergeSequence} is a sample
 * demonstrator. It is intended to show the use of a (simple) sequential
 * information flow, where the results of two independent {@link
 * de.claas.mosis.model.Processor} objects are merged. Here the basic sequence
 * is based on three {@link de.claas.mosis.model.Processor} objects only (i.e.
 * two sources and a sink).
 *
 * @author Claas Ahlrichs (claasahl@tzi.de)
 */
public class MergeSequence {

    /**
     * Entry point for this demonstrator. Here a linear function is generated by
     * one module as well as random numbers by another by another module and
     * displayed by another. The results of both generator are fed into the
     * sink. The function's slope and intercept can be varied by changing the
     * method's arguments.
     *
     * @param args the arguments, namely slope (i.e. {@link de.claas.mosis.io.generator.Linear#M})
     *             and intercept (i.e. {@link de.claas.mosis.io.generator.Linear#B}).
     */
    public static void main(String[] args) throws Exception {
        // Prepare processing modules
        Random src1 = new Random();
        Linear src2 = new Linear();
        src2.setParameter(Linear.M, args.length >= 1 ? args[0] : "1");
        src2.setParameter(Linear.B, args.length >= 2 ? args[1] : "0");
        ToString toString = new ToString();
        PlainText dst = new PlainText();
        dst.setParameter(PlainText.IMPL,
                StandardInputOutputImpl.class.getName());

        // Construct graph and initiate processing
        Graph graph = new Graph();
        graph.addLink(src1, toString);
        graph.addLink(src2, toString);
        graph.addLink(toString, dst);
        graph.process(InfiniteLevelOrder.class);
    }

}
